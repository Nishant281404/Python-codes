 class Solution:   
    def peakElement(self,arr):
        n = len(arr)
        low, high = 0, n - 1
        
        while low <= high:
            mid = (low + high) // 2
            
            # Check if mid is a peak element
            left = float('-inf') if mid == 0 else arr[mid - 1]
            right = float('-inf') if mid == n - 1 else arr[mid + 1]
            
            if arr[mid] > left and arr[mid] > right:
                return mid
            
            # Move to the side with a larger element
            if mid > 0 and arr[mid - 1] > arr[mid]:
                high = mid - 1
            else:
                low = mid + 1
        
        return -1  # This should not happen for valid inputs
    
    def validate_peak(arr, idx):
        if idx == -1 or idx >= len(arr):
            return False
        left = float('-inf') if idx == 0 else arr[idx - 1]
        right = float('-inf') if idx == len(arr) - 1 else arr[idx + 1]
        return arr[idx] > left and arr[idx] > right
## inf for infifnity in sart of array like -1 for 0-based index and in last when index ends in array.
